1. Next.js: Route Handler 우선 사용
2. 모든 API 엔드포인트는 Route Handler를 사용하여 구현하세요.
3. 데이터베이스 작업, 외부 API 호출, 인증 등 복잡한 서버 작업은 반드시 Route Handler를 사용하세요.
4. Server Action은 단순 폼 제출 또는 간단한 데이터 처리에만 사용하세요.
5. 프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.
6. 프로젝트 전반에 TypeScript를 사용하세요.
7. 모든 컴포넌트는 타입 안정성을 위해 TypeScript를 사용하세요.
8. 인터페이스 정의 시 이름 앞에 'I'를 접두사로 추가하세요.
9. 데이터베이스는 postgres 사용
10. 아래는 전체 데이터베이스 구조입니다.
- sales_performance
  - id
  - sales_plan_id
  - performance
  - achievement_rate
  - temperature
  - xs_size
  - s_size
  - m_size
  - l_size
  - xl_size
  - xxl_size
  - fourxl_size
  - created_at
  - updated_at
  - is_active

- sales_plans
  - id
  - season
  - plan_date
  - plan_time
  - channel_code
  - channel_detail
  - product_category
  - product_name
  - product_summary
  - quantity_composition
  - set_id
  - product_code
  - sale_price
  - commission_rate
  - target_quantity
  - created_at
  - updated_at
  - channel_id
  - is_active

- sales_channels
  - channel_code
  - channel_name
  - channel_details
  - remarks
  - created_at
  - updated_at
  - id
  - is_active

- set_products
  - set_id
  - set_name
  - individual_product_ids
  - remarks
  - created_at
  - updated_at
  - is_active

- products
  - id
  - product_code
  - item_number
  - product_name
  - specification
  - purchase_price
  - selling_price
  - barcode_info
  - barcode
  - tag_price
  - remarks
  - created_at
  - updated_at

- product_categories
  - id
  - category_name
  - created_at
  - updated_at
